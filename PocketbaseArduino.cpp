#include "PocketbaseArduino.h"
// cpp file - implementation

// implementation here

/**
 * @brief Fetches a single record from a Pocketbase collection.
 *
 * This function retrieves a single record from a Pocketbase collection based on the provided record ID.
 * It allows optional parameters for expanding related fields and selecting specific fields to include in the response.
 *
 * @param recordId The ID of the record to fetch.
 * @param expand (Optional) A string specifying related fields to expand in the response.
 * @param fields (Optional) A string specifying the fields to include in the response.
 * @return The fetched record as a String object.
 */
const String getOne(const char *recordId, const char *expand = nullptr, const char *fields = nullptr)
{
    try
    {
        // Construct the API endpoint URL with optional expand and fields query parameters
        String apiUrl = pb.getBaseUrl() + "/api/collections/" + collectionName + "/records/" + recordId;

        if (expand != nullptr)
        {
            apiUrl += "?expand=" + String(expand);
            if (fields != nullptr)
            {
                apiUrl += "&fields=" + String(fields);
            }
        }
        else if (fields != nullptr)
        {
            apiUrl += "?fields=" + String(fields);
        }

        // Perform the GET request to retrieve the record
        // Use your PocketBase library to make the GET request, and store the response in 'result'
        // For example, assuming pb has a getRecord method in your PocketBase library:
        String result = pb.getRecord(apiUrl);

        // Parse the result to check for error responses
        DynamicJsonDocument jsonResponse(1024); // Adjust the size based on your needs
        deserializeJson(jsonResponse, result);

        int code = jsonResponse["code"].as<int>();

        // Handle possible error responses
        if (code == 404)
        {
            // Handle 404 error
            throw PocketbaseArduinoException("Error: The requested resource wasn't found.");
        }
        else if (code == 403)
        {
            // Handle 403 error
            throw PocketbaseArduinoException("Error: Only admins can access this action.");
        }
        else
        {
            // Return the result
            return result;
        }
    }
    catch (const PocketbaseArduinoException &e)
    {
        // Handle your custom exception
        Serial.println(e.what());
    }
    catch (const std::exception &e)
    {
        // Handle other standard exceptions
        Serial.println("Exception occurred during the request: " + String(e.what()));
    }

    // Return an empty string in case of an error
    return "";
}

/**
 * @brief Creates a single, new record in the Pocketbase collection.
 *
 * @param jsonData The JSON data for the new record.
 * @param id (Optional) The ID of the record. If not set, it will be auto-generated by Pocketbase.
 * @param expand (Optional) A string specifying related fields to expand in the response.
 * @param fields (Optional) A string specifying the fields to include in the response.
 * @return True if the record was successfully created, false otherwise.
 */
bool create(const char *jsonData, const char *id = nullptr, const char *expand = nullptr, const char *fields = nullptr)
{
    try
    {
        // Perform the actual record creation
        bool success = pb.addRecord(collectionName, jsonData, id, expand, fields);

        if (!success)
        {
            // Handle the case where the record creation was not successful
            throw PocketbaseArduinoException("Error: Failed to create record.");
        }

        return success;
    }
    catch (const PocketbaseArduinoException &e)
    {
        // Handle your custom exception
        Serial.println(e.what());
    }
    catch (const std::exception &e)
    {
        // Handle other standard exceptions
        Serial.println("Exception occurred during the request: " + String(e.what()));
    }

    return false;
}