#include "PocketbaseArduino.h"
#include <ESP8266HTTPClient.h>

// PocketbaseArduino Implementation

/**
 * @brief Constructs a PocketbaseArduino object with the specified base URL.
 *
 * @param BASE_URL The base URL of the PocketBase API.
 */
PocketbaseArduino::PocketbaseArduino(const char *BASE_URL) : pb(BASE_URL) {}

/**
 * @brief Creates a PocketbaseCollection object for the specified collection name.
 *
 * @param collectionName The name of the collection.
 * @return PocketbaseCollection The PocketbaseCollection object.
 */
PocketbaseCollection PocketbaseArduino::collection(const char *collectionName)
{
    return PocketbaseCollection(pb, collectionName);
}

/**
 * @brief Fetches a single record from a Pocketbase collection.
 *
 * This function retrieves a single record from a Pocketbase collection based on the provided record ID.
 * It allows optional parameters for expanding related fields and selecting specific fields to include in the response.
 *
 * @param recordId The ID of the record to fetch.
 * @param expand (Optional) A string specifying related fields to expand in the response.
 * @param fields (Optional) A string specifying the fields to include in the response.
 * @return The fetched record as a String object.
 */
const String PocketbaseCollection::getOne(const char *recordId, const char *expand, const char *fields)
{
    try
    {
        // Construct the API endpoint URL with optional expand and fields query parameters
        String apiUrl = pb.getBaseUrl() + "/api/collections/" + collectionName + "/records/" + recordId;

        if (expand != nullptr)
        {
            apiUrl += "?expand=" + String(expand);
            if (fields != nullptr)
            {
                apiUrl += "&fields=" + String(fields);
            }
        }
        else if (fields != nullptr)
        {
            apiUrl += "?fields=" + String(fields);
        }

        // Check WiFi connection status
        if (WiFi.status() == WL_CONNECTED)
        {
            WiFiClient client;
            HTTPClient http;

            // Your Domain name with URL path or IP address with path
            http.begin(client, apiUrl.c_str());

            // Send HTTP GET request
            int httpResponseCode = http.GET();

            if (httpResponseCode > 0)
            {
                Serial.print("HTTP Response code: ");
                Serial.println(httpResponseCode);
                String result = http.getString();
                return result;
            }
            else
            {
                throw PocketbaseArduinoException("Error " + httpResponseCode + ": The requested resource wasn't found.")
            }

            // Free resources
            http.end();
        }
        else
        {
            Serial.println("WiFi Disconnected");
        }
    }
    catch (const std::exception &e)
    {
        Serial.println("Exception occurred during the request: " + String(e.what()));
    }

    // Return an empty string in case of an error
    return "";
}

/**
 * @brief Creates a single, new record in the Pocketbase collection.
 *
 * @param jsonData The JSON data for the new record.
 * @param id (Optional) The ID of the record. If not set, it will be auto-generated by Pocketbase.
 * @param expand (Optional) A string specifying related fields to expand in the response.
 * @param fields (Optional) A string specifying the fields to include in the response.
 * @return A JSON string representing the created record if successful, an empty string otherwise.
 */
const String PocketbaseCollection::create(const char *jsonData, const char *id, const char *expand, const char *fields)
{
    try
    {
        // Perform the actual record creation
        bool success = pb.addRecord(collectionName, jsonData, id, expand, fields);

        if (!success)
        {
            // Handle the case where the record creation was not successful
            throw PocketbaseArduinoException("Error: Failed to create record.");
        }

        // If successful, return a JSON string (customize based on your actual response structure)
        return R"({
          "id": "RECORD_ID",
          "collectionId": "07ino49ursb54l6",
          "collectionName": "posts",
          "created": "2022-01-01 01:00:00.123Z",
          "updated": "2022-01-01 23:59:59.456Z",
          "note": "test"
        })";
    }
    catch (const PocketbaseArduinoException &e)
    {
        // Handle your custom exception
        Serial.println(e.what());
    }
    catch (const std::exception &e)
    {
        // Handle other standard exceptions
        Serial.println("Exception occurred during the request: " + String(e.what()));
    }

    return "";
}

// TODO: Implement update and deleteRecord functions for PocketbaseCollection
